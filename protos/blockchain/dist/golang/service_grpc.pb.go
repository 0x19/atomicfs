// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package blockchainpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AtomicFsClient is the client API for AtomicFs service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AtomicFsClient interface {
	GetBlocks(ctx context.Context, in *BlocksRequest, opts ...grpc.CallOption) (*BlocksResponse, error)
	SubscribeToBlocks(ctx context.Context, in *SubscribeBlocksRequest, opts ...grpc.CallOption) (AtomicFs_SubscribeToBlocksClient, error)
	GetTransactions(ctx context.Context, in *TransactionsRequest, opts ...grpc.CallOption) (*TransactionsResponse, error)
	SubscribeToTransactions(ctx context.Context, in *SubscribeTransactionRequest, opts ...grpc.CallOption) (AtomicFs_SubscribeToTransactionsClient, error)
	GetAccount(ctx context.Context, in *AccountRequest, opts ...grpc.CallOption) (*AccountResponse, error)
}

type atomicFsClient struct {
	cc grpc.ClientConnInterface
}

func NewAtomicFsClient(cc grpc.ClientConnInterface) AtomicFsClient {
	return &atomicFsClient{cc}
}

func (c *atomicFsClient) GetBlocks(ctx context.Context, in *BlocksRequest, opts ...grpc.CallOption) (*BlocksResponse, error) {
	out := new(BlocksResponse)
	err := c.cc.Invoke(ctx, "/atomicfs.v1.blockchain.AtomicFs/GetBlocks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *atomicFsClient) SubscribeToBlocks(ctx context.Context, in *SubscribeBlocksRequest, opts ...grpc.CallOption) (AtomicFs_SubscribeToBlocksClient, error) {
	stream, err := c.cc.NewStream(ctx, &AtomicFs_ServiceDesc.Streams[0], "/atomicfs.v1.blockchain.AtomicFs/SubscribeToBlocks", opts...)
	if err != nil {
		return nil, err
	}
	x := &atomicFsSubscribeToBlocksClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AtomicFs_SubscribeToBlocksClient interface {
	Recv() (*BlocksResponse, error)
	grpc.ClientStream
}

type atomicFsSubscribeToBlocksClient struct {
	grpc.ClientStream
}

func (x *atomicFsSubscribeToBlocksClient) Recv() (*BlocksResponse, error) {
	m := new(BlocksResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *atomicFsClient) GetTransactions(ctx context.Context, in *TransactionsRequest, opts ...grpc.CallOption) (*TransactionsResponse, error) {
	out := new(TransactionsResponse)
	err := c.cc.Invoke(ctx, "/atomicfs.v1.blockchain.AtomicFs/GetTransactions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *atomicFsClient) SubscribeToTransactions(ctx context.Context, in *SubscribeTransactionRequest, opts ...grpc.CallOption) (AtomicFs_SubscribeToTransactionsClient, error) {
	stream, err := c.cc.NewStream(ctx, &AtomicFs_ServiceDesc.Streams[1], "/atomicfs.v1.blockchain.AtomicFs/SubscribeToTransactions", opts...)
	if err != nil {
		return nil, err
	}
	x := &atomicFsSubscribeToTransactionsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AtomicFs_SubscribeToTransactionsClient interface {
	Recv() (*TransactionsResponse, error)
	grpc.ClientStream
}

type atomicFsSubscribeToTransactionsClient struct {
	grpc.ClientStream
}

func (x *atomicFsSubscribeToTransactionsClient) Recv() (*TransactionsResponse, error) {
	m := new(TransactionsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *atomicFsClient) GetAccount(ctx context.Context, in *AccountRequest, opts ...grpc.CallOption) (*AccountResponse, error) {
	out := new(AccountResponse)
	err := c.cc.Invoke(ctx, "/atomicfs.v1.blockchain.AtomicFs/GetAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AtomicFsServer is the server API for AtomicFs service.
// All implementations must embed UnimplementedAtomicFsServer
// for forward compatibility
type AtomicFsServer interface {
	GetBlocks(context.Context, *BlocksRequest) (*BlocksResponse, error)
	SubscribeToBlocks(*SubscribeBlocksRequest, AtomicFs_SubscribeToBlocksServer) error
	GetTransactions(context.Context, *TransactionsRequest) (*TransactionsResponse, error)
	SubscribeToTransactions(*SubscribeTransactionRequest, AtomicFs_SubscribeToTransactionsServer) error
	GetAccount(context.Context, *AccountRequest) (*AccountResponse, error)
	mustEmbedUnimplementedAtomicFsServer()
}

// UnimplementedAtomicFsServer must be embedded to have forward compatible implementations.
type UnimplementedAtomicFsServer struct {
}

func (UnimplementedAtomicFsServer) GetBlocks(context.Context, *BlocksRequest) (*BlocksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlocks not implemented")
}
func (UnimplementedAtomicFsServer) SubscribeToBlocks(*SubscribeBlocksRequest, AtomicFs_SubscribeToBlocksServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeToBlocks not implemented")
}
func (UnimplementedAtomicFsServer) GetTransactions(context.Context, *TransactionsRequest) (*TransactionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactions not implemented")
}
func (UnimplementedAtomicFsServer) SubscribeToTransactions(*SubscribeTransactionRequest, AtomicFs_SubscribeToTransactionsServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeToTransactions not implemented")
}
func (UnimplementedAtomicFsServer) GetAccount(context.Context, *AccountRequest) (*AccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccount not implemented")
}
func (UnimplementedAtomicFsServer) mustEmbedUnimplementedAtomicFsServer() {}

// UnsafeAtomicFsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AtomicFsServer will
// result in compilation errors.
type UnsafeAtomicFsServer interface {
	mustEmbedUnimplementedAtomicFsServer()
}

func RegisterAtomicFsServer(s grpc.ServiceRegistrar, srv AtomicFsServer) {
	s.RegisterService(&AtomicFs_ServiceDesc, srv)
}

func _AtomicFs_GetBlocks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlocksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AtomicFsServer).GetBlocks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/atomicfs.v1.blockchain.AtomicFs/GetBlocks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AtomicFsServer).GetBlocks(ctx, req.(*BlocksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AtomicFs_SubscribeToBlocks_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeBlocksRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AtomicFsServer).SubscribeToBlocks(m, &atomicFsSubscribeToBlocksServer{stream})
}

type AtomicFs_SubscribeToBlocksServer interface {
	Send(*BlocksResponse) error
	grpc.ServerStream
}

type atomicFsSubscribeToBlocksServer struct {
	grpc.ServerStream
}

func (x *atomicFsSubscribeToBlocksServer) Send(m *BlocksResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _AtomicFs_GetTransactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransactionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AtomicFsServer).GetTransactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/atomicfs.v1.blockchain.AtomicFs/GetTransactions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AtomicFsServer).GetTransactions(ctx, req.(*TransactionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AtomicFs_SubscribeToTransactions_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeTransactionRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AtomicFsServer).SubscribeToTransactions(m, &atomicFsSubscribeToTransactionsServer{stream})
}

type AtomicFs_SubscribeToTransactionsServer interface {
	Send(*TransactionsResponse) error
	grpc.ServerStream
}

type atomicFsSubscribeToTransactionsServer struct {
	grpc.ServerStream
}

func (x *atomicFsSubscribeToTransactionsServer) Send(m *TransactionsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _AtomicFs_GetAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AtomicFsServer).GetAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/atomicfs.v1.blockchain.AtomicFs/GetAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AtomicFsServer).GetAccount(ctx, req.(*AccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AtomicFs_ServiceDesc is the grpc.ServiceDesc for AtomicFs service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AtomicFs_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "atomicfs.v1.blockchain.AtomicFs",
	HandlerType: (*AtomicFsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBlocks",
			Handler:    _AtomicFs_GetBlocks_Handler,
		},
		{
			MethodName: "GetTransactions",
			Handler:    _AtomicFs_GetTransactions_Handler,
		},
		{
			MethodName: "GetAccount",
			Handler:    _AtomicFs_GetAccount_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeToBlocks",
			Handler:       _AtomicFs_SubscribeToBlocks_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeToTransactions",
			Handler:       _AtomicFs_SubscribeToTransactions_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "service.proto",
}
